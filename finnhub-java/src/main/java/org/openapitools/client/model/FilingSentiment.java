/*
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FilingSentiment
 */
@JsonPropertyOrder({
  FilingSentiment.JSON_PROPERTY_NEGATIVE,
  FilingSentiment.JSON_PROPERTY_POSITIVE,
  FilingSentiment.JSON_PROPERTY_POLARITY,
  FilingSentiment.JSON_PROPERTY_LITIGIOUS,
  FilingSentiment.JSON_PROPERTY_UNCERTAINTY,
  FilingSentiment.JSON_PROPERTY_CONSTRAINING,
  FilingSentiment.JSON_PROPERTY_MODAL_WEAK,
  FilingSentiment.JSON_PROPERTY_MODAL_STRONG,
  FilingSentiment.JSON_PROPERTY_MODAL_MODERATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class FilingSentiment {
  public static final String JSON_PROPERTY_NEGATIVE = "negative";
  @javax.annotation.Nullable
  private Float negative;

  public static final String JSON_PROPERTY_POSITIVE = "positive";
  @javax.annotation.Nullable
  private Float positive;

  public static final String JSON_PROPERTY_POLARITY = "polarity";
  @javax.annotation.Nullable
  private Float polarity;

  public static final String JSON_PROPERTY_LITIGIOUS = "litigious";
  @javax.annotation.Nullable
  private Float litigious;

  public static final String JSON_PROPERTY_UNCERTAINTY = "uncertainty";
  @javax.annotation.Nullable
  private Float uncertainty;

  public static final String JSON_PROPERTY_CONSTRAINING = "constraining";
  @javax.annotation.Nullable
  private Float constraining;

  public static final String JSON_PROPERTY_MODAL_WEAK = "modal-weak";
  @javax.annotation.Nullable
  private Float modalWeak;

  public static final String JSON_PROPERTY_MODAL_STRONG = "modal-strong";
  @javax.annotation.Nullable
  private Float modalStrong;

  public static final String JSON_PROPERTY_MODAL_MODERATE = "modal-moderate";
  @javax.annotation.Nullable
  private Float modalModerate;

  public FilingSentiment() {
  }

  public FilingSentiment negative(@javax.annotation.Nullable Float negative) {
    
    this.negative = negative;
    return this;
  }

  /**
   * % of negative words in the filing.
   * @return negative
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getNegative() {
    return negative;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegative(@javax.annotation.Nullable Float negative) {
    this.negative = negative;
  }

  public FilingSentiment positive(@javax.annotation.Nullable Float positive) {
    
    this.positive = positive;
    return this;
  }

  /**
   * % of positive words in the filing.
   * @return positive
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPositive() {
    return positive;
  }


  @JsonProperty(JSON_PROPERTY_POSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPositive(@javax.annotation.Nullable Float positive) {
    this.positive = positive;
  }

  public FilingSentiment polarity(@javax.annotation.Nullable Float polarity) {
    
    this.polarity = polarity;
    return this;
  }

  /**
   * % of polarity words in the filing.
   * @return polarity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POLARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getPolarity() {
    return polarity;
  }


  @JsonProperty(JSON_PROPERTY_POLARITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPolarity(@javax.annotation.Nullable Float polarity) {
    this.polarity = polarity;
  }

  public FilingSentiment litigious(@javax.annotation.Nullable Float litigious) {
    
    this.litigious = litigious;
    return this;
  }

  /**
   * % of litigious words in the filing.
   * @return litigious
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LITIGIOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getLitigious() {
    return litigious;
  }


  @JsonProperty(JSON_PROPERTY_LITIGIOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLitigious(@javax.annotation.Nullable Float litigious) {
    this.litigious = litigious;
  }

  public FilingSentiment uncertainty(@javax.annotation.Nullable Float uncertainty) {
    
    this.uncertainty = uncertainty;
    return this;
  }

  /**
   * % of uncertainty words in the filing.
   * @return uncertainty
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNCERTAINTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getUncertainty() {
    return uncertainty;
  }


  @JsonProperty(JSON_PROPERTY_UNCERTAINTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUncertainty(@javax.annotation.Nullable Float uncertainty) {
    this.uncertainty = uncertainty;
  }

  public FilingSentiment constraining(@javax.annotation.Nullable Float constraining) {
    
    this.constraining = constraining;
    return this;
  }

  /**
   * % of constraining words in the filing.
   * @return constraining
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSTRAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getConstraining() {
    return constraining;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraining(@javax.annotation.Nullable Float constraining) {
    this.constraining = constraining;
  }

  public FilingSentiment modalWeak(@javax.annotation.Nullable Float modalWeak) {
    
    this.modalWeak = modalWeak;
    return this;
  }

  /**
   * % of modal-weak words in the filing.
   * @return modalWeak
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODAL_WEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getModalWeak() {
    return modalWeak;
  }


  @JsonProperty(JSON_PROPERTY_MODAL_WEAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModalWeak(@javax.annotation.Nullable Float modalWeak) {
    this.modalWeak = modalWeak;
  }

  public FilingSentiment modalStrong(@javax.annotation.Nullable Float modalStrong) {
    
    this.modalStrong = modalStrong;
    return this;
  }

  /**
   * % of modal-strong words in the filing.
   * @return modalStrong
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODAL_STRONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getModalStrong() {
    return modalStrong;
  }


  @JsonProperty(JSON_PROPERTY_MODAL_STRONG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModalStrong(@javax.annotation.Nullable Float modalStrong) {
    this.modalStrong = modalStrong;
  }

  public FilingSentiment modalModerate(@javax.annotation.Nullable Float modalModerate) {
    
    this.modalModerate = modalModerate;
    return this;
  }

  /**
   * % of modal-moderate words in the filing.
   * @return modalModerate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODAL_MODERATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getModalModerate() {
    return modalModerate;
  }


  @JsonProperty(JSON_PROPERTY_MODAL_MODERATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModalModerate(@javax.annotation.Nullable Float modalModerate) {
    this.modalModerate = modalModerate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilingSentiment filingSentiment = (FilingSentiment) o;
    return Objects.equals(this.negative, filingSentiment.negative) &&
        Objects.equals(this.positive, filingSentiment.positive) &&
        Objects.equals(this.polarity, filingSentiment.polarity) &&
        Objects.equals(this.litigious, filingSentiment.litigious) &&
        Objects.equals(this.uncertainty, filingSentiment.uncertainty) &&
        Objects.equals(this.constraining, filingSentiment.constraining) &&
        Objects.equals(this.modalWeak, filingSentiment.modalWeak) &&
        Objects.equals(this.modalStrong, filingSentiment.modalStrong) &&
        Objects.equals(this.modalModerate, filingSentiment.modalModerate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negative, positive, polarity, litigious, uncertainty, constraining, modalWeak, modalStrong, modalModerate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilingSentiment {\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("    polarity: ").append(toIndentedString(polarity)).append("\n");
    sb.append("    litigious: ").append(toIndentedString(litigious)).append("\n");
    sb.append("    uncertainty: ").append(toIndentedString(uncertainty)).append("\n");
    sb.append("    constraining: ").append(toIndentedString(constraining)).append("\n");
    sb.append("    modalWeak: ").append(toIndentedString(modalWeak)).append("\n");
    sb.append("    modalStrong: ").append(toIndentedString(modalStrong)).append("\n");
    sb.append("    modalModerate: ").append(toIndentedString(modalModerate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

