/*
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Indicator
 */
@JsonPropertyOrder({
  Indicator.JSON_PROPERTY_BUY,
  Indicator.JSON_PROPERTY_NEUTRAL,
  Indicator.JSON_PROPERTY_SELL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class Indicator {
  public static final String JSON_PROPERTY_BUY = "buy";
  @javax.annotation.Nullable
  private Long buy;

  public static final String JSON_PROPERTY_NEUTRAL = "neutral";
  @javax.annotation.Nullable
  private Long neutral;

  public static final String JSON_PROPERTY_SELL = "sell";
  @javax.annotation.Nullable
  private Long sell;

  public Indicator() {
  }

  public Indicator buy(@javax.annotation.Nullable Long buy) {
    
    this.buy = buy;
    return this;
  }

  /**
   * Number of buy signals
   * @return buy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBuy() {
    return buy;
  }


  @JsonProperty(JSON_PROPERTY_BUY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuy(@javax.annotation.Nullable Long buy) {
    this.buy = buy;
  }

  public Indicator neutral(@javax.annotation.Nullable Long neutral) {
    
    this.neutral = neutral;
    return this;
  }

  /**
   * Number of neutral signals
   * @return neutral
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEUTRAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getNeutral() {
    return neutral;
  }


  @JsonProperty(JSON_PROPERTY_NEUTRAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNeutral(@javax.annotation.Nullable Long neutral) {
    this.neutral = neutral;
  }

  public Indicator sell(@javax.annotation.Nullable Long sell) {
    
    this.sell = sell;
    return this;
  }

  /**
   * Number of sell signals
   * @return sell
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSell() {
    return sell;
  }


  @JsonProperty(JSON_PROPERTY_SELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSell(@javax.annotation.Nullable Long sell) {
    this.sell = sell;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Indicator indicator = (Indicator) o;
    return Objects.equals(this.buy, indicator.buy) &&
        Objects.equals(this.neutral, indicator.neutral) &&
        Objects.equals(this.sell, indicator.sell);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buy, neutral, sell);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Indicator {\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    neutral: ").append(toIndentedString(neutral)).append("\n");
    sb.append("    sell: ").append(toIndentedString(sell)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

