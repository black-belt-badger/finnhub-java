/*
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TickData
 */
@JsonPropertyOrder({
  TickData.JSON_PROPERTY_S,
  TickData.JSON_PROPERTY_SKIP,
  TickData.JSON_PROPERTY_COUNT,
  TickData.JSON_PROPERTY_TOTAL,
  TickData.JSON_PROPERTY_V,
  TickData.JSON_PROPERTY_P,
  TickData.JSON_PROPERTY_T,
  TickData.JSON_PROPERTY_X,
  TickData.JSON_PROPERTY_C
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class TickData {
  public static final String JSON_PROPERTY_S = "s";
  @javax.annotation.Nullable
  private String s;

  public static final String JSON_PROPERTY_SKIP = "skip";
  @javax.annotation.Nullable
  private Long skip;

  public static final String JSON_PROPERTY_COUNT = "count";
  @javax.annotation.Nullable
  private Long count;

  public static final String JSON_PROPERTY_TOTAL = "total";
  @javax.annotation.Nullable
  private Long total;

  public static final String JSON_PROPERTY_V = "v";
  @javax.annotation.Nullable
  private List<Float> v = new ArrayList<>();

  public static final String JSON_PROPERTY_P = "p";
  @javax.annotation.Nullable
  private List<Float> p = new ArrayList<>();

  public static final String JSON_PROPERTY_T = "t";
  @javax.annotation.Nullable
  private List<Long> t = new ArrayList<>();

  public static final String JSON_PROPERTY_X = "x";
  @javax.annotation.Nullable
  private List<String> x = new ArrayList<>();

  public static final String JSON_PROPERTY_C = "c";
  @javax.annotation.Nullable
  private List<List<String>> c = new ArrayList<>();

  public TickData() {
  }

  public TickData s(@javax.annotation.Nullable String s) {
    
    this.s = s;
    return this;
  }

  /**
   * Symbol.
   * @return s
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getS() {
    return s;
  }


  @JsonProperty(JSON_PROPERTY_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setS(@javax.annotation.Nullable String s) {
    this.s = s;
  }

  public TickData skip(@javax.annotation.Nullable Long skip) {
    
    this.skip = skip;
    return this;
  }

  /**
   * Number of ticks skipped.
   * @return skip
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSkip() {
    return skip;
  }


  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkip(@javax.annotation.Nullable Long skip) {
    this.skip = skip;
  }

  public TickData count(@javax.annotation.Nullable Long count) {
    
    this.count = count;
    return this;
  }

  /**
   * Number of ticks returned. If &lt;code&gt;count&lt;/code&gt; &lt; &lt;code&gt;limit&lt;/code&gt;, all data for that date has been returned.
   * @return count
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(@javax.annotation.Nullable Long count) {
    this.count = count;
  }

  public TickData total(@javax.annotation.Nullable Long total) {
    
    this.total = total;
    return this;
  }

  /**
   * Total number of ticks for that date.
   * @return total
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotal(@javax.annotation.Nullable Long total) {
    this.total = total;
  }

  public TickData v(@javax.annotation.Nullable List<Float> v) {
    
    this.v = v;
    return this;
  }

  public TickData addVItem(Float vItem) {
    if (this.v == null) {
      this.v = new ArrayList<>();
    }
    this.v.add(vItem);
    return this;
  }

  /**
   * List of volume data.
   * @return v
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Float> getV() {
    return v;
  }


  @JsonProperty(JSON_PROPERTY_V)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setV(@javax.annotation.Nullable List<Float> v) {
    this.v = v;
  }

  public TickData p(@javax.annotation.Nullable List<Float> p) {
    
    this.p = p;
    return this;
  }

  public TickData addPItem(Float pItem) {
    if (this.p == null) {
      this.p = new ArrayList<>();
    }
    this.p.add(pItem);
    return this;
  }

  /**
   * List of price data.
   * @return p
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Float> getP() {
    return p;
  }


  @JsonProperty(JSON_PROPERTY_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setP(@javax.annotation.Nullable List<Float> p) {
    this.p = p;
  }

  public TickData t(@javax.annotation.Nullable List<Long> t) {
    
    this.t = t;
    return this;
  }

  public TickData addTItem(Long tItem) {
    if (this.t == null) {
      this.t = new ArrayList<>();
    }
    this.t.add(tItem);
    return this;
  }

  /**
   * List of timestamp in UNIX ms.
   * @return t
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getT() {
    return t;
  }


  @JsonProperty(JSON_PROPERTY_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setT(@javax.annotation.Nullable List<Long> t) {
    this.t = t;
  }

  public TickData x(@javax.annotation.Nullable List<String> x) {
    
    this.x = x;
    return this;
  }

  public TickData addXItem(String xItem) {
    if (this.x == null) {
      this.x = new ArrayList<>();
    }
    this.x.add(xItem);
    return this;
  }

  /**
   * List of venues/exchanges. A list of exchange codes can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp&#x3D;sharing\&quot;,&gt;here&lt;/a&gt;
   * @return x
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getX() {
    return x;
  }


  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setX(@javax.annotation.Nullable List<String> x) {
    this.x = x;
  }

  public TickData c(@javax.annotation.Nullable List<List<String>> c) {
    
    this.c = c;
    return this;
  }

  public TickData addCItem(List<String> cItem) {
    if (this.c == null) {
      this.c = new ArrayList<>();
    }
    this.c.add(cItem);
    return this;
  }

  /**
   * List of trade conditions. A comprehensive list of trade conditions code can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;
   * @return c
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<String>> getC() {
    return c;
  }


  @JsonProperty(JSON_PROPERTY_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setC(@javax.annotation.Nullable List<List<String>> c) {
    this.c = c;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickData tickData = (TickData) o;
    return Objects.equals(this.s, tickData.s) &&
        Objects.equals(this.skip, tickData.skip) &&
        Objects.equals(this.count, tickData.count) &&
        Objects.equals(this.total, tickData.total) &&
        Objects.equals(this.v, tickData.v) &&
        Objects.equals(this.p, tickData.p) &&
        Objects.equals(this.t, tickData.t) &&
        Objects.equals(this.x, tickData.x) &&
        Objects.equals(this.c, tickData.c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s, skip, count, total, v, p, t, x, c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickData {\n");
    sb.append("    s: ").append(toIndentedString(s)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    v: ").append(toIndentedString(v)).append("\n");
    sb.append("    p: ").append(toIndentedString(p)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

