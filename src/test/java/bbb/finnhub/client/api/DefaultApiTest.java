/*
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package bbb.finnhub.client.api;

import bbb.finnhub.client.model.AIChatBody;
import bbb.finnhub.client.model.AIChatResponse;
import bbb.finnhub.client.model.AggregateIndicators;
import bbb.finnhub.client.model.AirlinePriceIndexData;
import bbb.finnhub.client.model.BankBranchRes;
import bbb.finnhub.client.model.BasicFinancials;
import bbb.finnhub.client.model.BondCandles;
import bbb.finnhub.client.model.BondProfile;
import bbb.finnhub.client.model.BondTickData;
import bbb.finnhub.client.model.BondYieldCurve;
import bbb.finnhub.client.model.CompanyESG;
import bbb.finnhub.client.model.CompanyEarningsQualityScore;
import bbb.finnhub.client.model.CompanyExecutive;
import bbb.finnhub.client.model.CompanyNews;
import bbb.finnhub.client.model.CompanyProfile;
import bbb.finnhub.client.model.CompanyProfile2;
import bbb.finnhub.client.model.CongressionalTrading;
import bbb.finnhub.client.model.CountryMetadata;
import bbb.finnhub.client.model.CovidInfo;
import bbb.finnhub.client.model.CryptoCandles;
import bbb.finnhub.client.model.CryptoProfile;
import bbb.finnhub.client.model.CryptoSymbol;
import bbb.finnhub.client.model.Dividends;
import bbb.finnhub.client.model.Dividends2;
import bbb.finnhub.client.model.ETFsCountryExposure;
import bbb.finnhub.client.model.ETFsHoldings;
import bbb.finnhub.client.model.ETFsProfile;
import bbb.finnhub.client.model.ETFsSectorExposure;
import bbb.finnhub.client.model.EarningResult;
import bbb.finnhub.client.model.EarningsCalendar;
import bbb.finnhub.client.model.EarningsCallLive;
import bbb.finnhub.client.model.EarningsCallTranscripts;
import bbb.finnhub.client.model.EarningsCallTranscriptsList;
import bbb.finnhub.client.model.EarningsEstimates;
import bbb.finnhub.client.model.EbitEstimates;
import bbb.finnhub.client.model.EbitdaEstimates;
import bbb.finnhub.client.model.EconomicCalendar;
import bbb.finnhub.client.model.EconomicCode;
import bbb.finnhub.client.model.EconomicData;
import bbb.finnhub.client.model.FDAComitteeMeeting;
import bbb.finnhub.client.model.Filing;
import bbb.finnhub.client.model.FinancialStatements;
import bbb.finnhub.client.model.FinancialsAsReported;
import bbb.finnhub.client.model.ForexCandles;
import bbb.finnhub.client.model.ForexSymbol;
import bbb.finnhub.client.model.Forexrates;
import bbb.finnhub.client.model.FundOwnership;
import bbb.finnhub.client.model.HistoricalCompanyESG;
import bbb.finnhub.client.model.HistoricalEmployeeCount;
import bbb.finnhub.client.model.HistoricalMarketCapData;
import bbb.finnhub.client.model.HistoricalNBBO;
import bbb.finnhub.client.model.IPOCalendar;
import bbb.finnhub.client.model.InFilingResponse;
import bbb.finnhub.client.model.InFilingSearchBody;
import bbb.finnhub.client.model.IndicesConstituents;
import bbb.finnhub.client.model.IndicesHistoricalConstituents;
import bbb.finnhub.client.model.InsiderSentiments;
import bbb.finnhub.client.model.InsiderTransactions;
import bbb.finnhub.client.model.InstitutionalOwnership;
import bbb.finnhub.client.model.InstitutionalPortfolio;
import bbb.finnhub.client.model.InstitutionalProfile;
import bbb.finnhub.client.model.InternationalFiling;
import bbb.finnhub.client.model.InvestmentThemes;
import bbb.finnhub.client.model.IsinChange;
import bbb.finnhub.client.model.LastBidAsk;
import bbb.finnhub.client.model.LobbyingResult;
import java.time.LocalDate;
import bbb.finnhub.client.model.MarketHoliday;
import bbb.finnhub.client.model.MarketNews;
import bbb.finnhub.client.model.MarketStatus;
import bbb.finnhub.client.model.MutualFundCountryExposure;
import bbb.finnhub.client.model.MutualFundEet;
import bbb.finnhub.client.model.MutualFundEetPai;
import bbb.finnhub.client.model.MutualFundHoldings;
import bbb.finnhub.client.model.MutualFundProfile;
import bbb.finnhub.client.model.MutualFundSectorExposure;
import bbb.finnhub.client.model.NewsSentiment;
import bbb.finnhub.client.model.Ownership;
import bbb.finnhub.client.model.PatternRecognition;
import bbb.finnhub.client.model.PressRelease;
import bbb.finnhub.client.model.PriceMetrics;
import bbb.finnhub.client.model.PriceTarget;
import bbb.finnhub.client.model.Quote;
import bbb.finnhub.client.model.RecommendationTrend;
import bbb.finnhub.client.model.RevenueBreakdown;
import bbb.finnhub.client.model.RevenueBreakdown2;
import bbb.finnhub.client.model.RevenueEstimates;
import bbb.finnhub.client.model.SECSentimentAnalysis;
import bbb.finnhub.client.model.SearchBody;
import bbb.finnhub.client.model.SearchFilter;
import bbb.finnhub.client.model.SearchResponse;
import bbb.finnhub.client.model.SectorMetric;
import bbb.finnhub.client.model.SimilarityIndex;
import bbb.finnhub.client.model.SocialSentiment;
import bbb.finnhub.client.model.Split;
import bbb.finnhub.client.model.StockCandles;
import bbb.finnhub.client.model.StockPresentation;
import bbb.finnhub.client.model.StockSymbol;
import bbb.finnhub.client.model.SupplyChainRelationships;
import bbb.finnhub.client.model.SupportResistance;
import bbb.finnhub.client.model.SymbolChange;
import bbb.finnhub.client.model.SymbolLookup;
import bbb.finnhub.client.model.TickData;
import bbb.finnhub.client.model.UpgradeDowngrade;
import bbb.finnhub.client.model.UsaSpendingResult;
import bbb.finnhub.client.model.UsptoPatentResult;
import bbb.finnhub.client.model.VisaApplicationResult;

import bbb.finnhub.client.Configuration;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonObject;
import io.vertx.core.Vertx;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.unit.junit.RunTestOnContext;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.Async;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private DefaultApi api;

    @BeforeAll
    public void setupApiClient() {
        api = new DefaultApiImpl();
    }

    /**
     * Aggregate Indicators
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v. A full list of indicators can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1MWuy0WuT2yVlxr1KbPdggVygMZtJfunDnhe-C0GEXYM/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void aggregateIndicatorTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        api.aggregateIndicator(symbol, resolution, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * AI Copilot
     * &lt;p&gt;Chat with our AI copilot powered by Neyman AI trained on the extensive Finnhub&#39;s global data. You can ask it any finance-related questions just like with other LLM models and receive results in texts and widgets.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void aiChatTest(TestContext testContext) {
        Async async = testContext.async();
        AIChatBody search = null;
        api.aiChat(search, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Airline Price Index
     * &lt;p&gt;The Flight Ticket Price Index API provides comprehensive data on airline ticket prices, including the average daily ticket price and its percentage change (price index). This data, collected weekly and projected two weeks ahead, aggregates daily prices and indexes from the 50 busiest and largest airports across the USA. The dataset includes detailed information on airlines, dates, and average ticket prices, offering valuable insights for market analysis and pricing strategies.&lt;/p&gt;&lt;p&gt;The price index is calculated as percentage change of average daily ticket price from the previous weekly reading. Raw ticket prices data is available for Enterprise users. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact us&lt;/a&gt; to inquire about the raw price data.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void airlinePriceIndexTest(TestContext testContext) {
        Async async = testContext.async();
        String airline = null;
        LocalDate from = null;
        LocalDate to = null;
        api.airlinePriceIndex(airline, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Bank Branch List
     * Retrieve list of US bank branches information for a given symbol.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void bankBranchTest(TestContext testContext) {
        Async async = testContext.async();
        Object symbol = null;
        api.bankBranch(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Bond price data
     * &lt;p&gt;Get bond&#39;s price data. The following datasets are supported:&lt;/p&gt;&lt;table class&#x3D;\&quot;table table-hover\&quot;&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Exchange&lt;/th&gt;       &lt;th&gt;Segment&lt;/th&gt;       &lt;th&gt;Delay&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;   &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;US Government Bonds&lt;/th&gt;       &lt;td&gt;Government Bonds&lt;/td&gt;       &lt;td&gt;End-of-day&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;FINRA Trace&lt;/th&gt;       &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;       &lt;td&gt;Delayed 4h&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;FINRA Trace&lt;/th&gt;       &lt;td&gt;144A Bonds&lt;/td&gt;       &lt;td&gt;Delayed 4h&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void bondPriceTest(TestContext testContext) {
        Async async = testContext.async();
        String isin = null;
        Long from = null;
        Long to = null;
        api.bondPrice(isin, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Bond Profile
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP. A list of supported bonds can be found &lt;a href&#x3D;\&quot;/api/v1/bond/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void bondProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String isin = null;
        String cusip = null;
        String figi = null;
        api.bondProfile(isin, cusip, figi, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Bond Tick Data
     * &lt;p&gt;Get trade-level data for bonds. The following datasets are supported:&lt;/p&gt;&lt;table class&#x3D;\&quot;table table-hover\&quot;&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Exchange&lt;/th&gt;       &lt;th&gt;Segment&lt;/th&gt;       &lt;th&gt;Delay&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;FINRA Trace&lt;/th&gt;       &lt;td&gt;BTDS: US Corporate Bonds&lt;/td&gt;       &lt;td&gt;Delayed 4h&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;FINRA Trace&lt;/th&gt;       &lt;td&gt;144A Bonds&lt;/td&gt;       &lt;td&gt;Delayed 4h&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void bondTickTest(TestContext testContext) {
        Async async = testContext.async();
        String isin = null;
        LocalDate date = null;
        Long limit = null;
        Long skip = null;
        String exchange = null;
        api.bondTick(isin, date, limit, skip, exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Bond Yield Curve
     * Get yield curve data for Treasury bonds.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void bondYieldCurveTest(TestContext testContext) {
        Async async = testContext.async();
        String code = null;
        api.bondYieldCurve(code, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Basic Financials
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyBasicFinancialsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String metric = null;
        api.companyBasicFinancials(symbol, metric, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Surprises
     * Get company historical quarterly earnings surprise going back to 2000.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEarningsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        Long limit = null;
        api.companyEarnings(symbol, limit, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company Earnings Quality Score
     * &lt;p&gt;This endpoint provides Earnings Quality Score for global companies.&lt;/p&gt;&lt;p&gt; Earnings quality refers to the extent to which current earnings predict future earnings. \&quot;High-quality\&quot; earnings are expected to persist, while \&quot;low-quality\&quot; earnings do not. A higher score means a higher earnings quality&lt;/p&gt;&lt;p&gt;Finnhub uses a proprietary model which takes into consideration 4 criteria:&lt;/p&gt; &lt;ul style&#x3D;\&quot;list-style-type: unset; margin-left: 30px;\&quot;&gt;&lt;li&gt;Profitability&lt;/li&gt;&lt;li&gt;Growth&lt;/li&gt;&lt;li&gt;Cash Generation &amp; Capital Allocation&lt;/li&gt;&lt;li&gt;Leverage&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEarningsQualityScoreTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String freq = null;
        api.companyEarningsQualityScore(symbol, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * EBIT Estimates
     * Get company&#39;s ebit estimates.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEbitEstimatesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String freq = null;
        api.companyEbitEstimates(symbol, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * EBITDA Estimates
     * Get company&#39;s ebitda estimates.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEbitdaEstimatesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String freq = null;
        api.companyEbitdaEstimates(symbol, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Estimates
     * Get company&#39;s EPS estimates.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEpsEstimatesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String freq = null;
        api.companyEpsEstimates(symbol, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company ESG Scores
     * &lt;p&gt;This endpoint provides the latest ESG scores and important indicators for 7000+ global companies. The data is collected through company&#39;s public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyEsgScoreTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.companyEsgScore(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company Executive
     * Get a list of company&#39;s executives and members of the Board.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyExecutiveTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.companyExecutive(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Historical ESG Scores
     * &lt;p&gt;This endpoint provides historical ESG scores and important indicators for 7000+ global companies. The data is collected through company&#39;s public ESG disclosure and public sources.&lt;/p&gt;&lt;p&gt;Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyHistoricalEsgScoreTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.companyHistoricalEsgScore(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company News
     * List latest company news by symbol. This endpoint is only available for North American companies.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyNewsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.companyNews(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Peers
     * Get company peers. Return a list of peers operating in the same country and sector/industry.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyPeersTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String grouping = null;
        api.companyPeers(symbol, grouping, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company Profile
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        String cusip = null;
        api.companyProfile(symbol, isin, cusip, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company Profile 2
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of &lt;a href&#x3D;\&quot;#company-profile\&quot;&gt;Company Profile&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyProfile2Test(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        String cusip = null;
        api.companyProfile2(symbol, isin, cusip, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Revenue Estimates
     * Get company&#39;s revenue estimates.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void companyRevenueEstimatesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String freq = null;
        api.companyRevenueEstimates(symbol, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Congressional Trading
     * Get stock trades data disclosed by members of congress.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void congressionalTradingTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.congressionalTrading(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Country Metadata
     * List all countries and metadata.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void countryTest(TestContext testContext) {
        Async async = testContext.async();
        api.country(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * COVID-19
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API &lt;a href&#x3D;\&quot;https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;here&lt;/a&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void covid19Test(TestContext testContext) {
        Async async = testContext.async();
        api.covid19(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Crypto Candles
     * Get candlestick data for crypto symbols.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void cryptoCandlesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        Long from = null;
        Long to = null;
        api.cryptoCandles(symbol, resolution, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Crypto Exchanges
     * List supported crypto exchanges
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void cryptoExchangesTest(TestContext testContext) {
        Async async = testContext.async();
        api.cryptoExchanges(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Crypto Profile
     * Get crypto&#39;s profile.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void cryptoProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.cryptoProfile(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Crypto Symbol
     * List supported crypto symbols by exchange
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void cryptoSymbolsTest(TestContext testContext) {
        Async async = testContext.async();
        String exchange = null;
        api.cryptoSymbols(exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Calendar
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void earningsCalendarTest(TestContext testContext) {
        Async async = testContext.async();
        LocalDate from = null;
        LocalDate to = null;
        String symbol = null;
        Boolean international = null;
        api.earningsCalendar(from, to, symbol, international, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Call Audio Live
     * &lt;p&gt;Stream live earnings calls with data provided in the calendar. The data will be available in m3u8 format. mp3 files will be available once the calls finish in the &lt;code&gt;recording&lt;/code&gt; field.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void earningsCallLiveTest(TestContext testContext) {
        Async async = testContext.async();
        LocalDate from = null;
        LocalDate to = null;
        String symbol = null;
        api.earningsCallLive(from, to, symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Economic Calendar
     * &lt;p&gt;Get recent and upcoming economic releases.&lt;/p&gt;&lt;p&gt;Historical events and surprises are available for Enterprise clients.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void economicCalendarTest(TestContext testContext) {
        Async async = testContext.async();
        LocalDate from = null;
        LocalDate to = null;
        api.economicCalendar(from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Economic Code
     * List codes of supported economic data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void economicCodeTest(TestContext testContext) {
        Async async = testContext.async();
        api.economicCode(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Economic Data
     * Get economic data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void economicDataTest(TestContext testContext) {
        Async async = testContext.async();
        String code = null;
        api.economicData(code, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * ETFs Country Exposure
     * Get ETF country exposure data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void etfsCountryExposureTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.etfsCountryExposure(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * ETFs Holdings
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings. A list of supported ETFs can be found &lt;a href&#x3D;\&quot;/api/v1/etf/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void etfsHoldingsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        Long skip = null;
        String date = null;
        api.etfsHoldings(symbol, isin, skip, date, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * ETFs Profile
     * Get ETF profile information. This endpoint has global coverage. A list of supported ETFs can be found &lt;a href&#x3D;\&quot;/api/v1/etf/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void etfsProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.etfsProfile(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * ETFs Sector Exposure
     * Get ETF sector exposure data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void etfsSectorExposureTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.etfsSectorExposure(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * FDA Committee Meeting Calendar
     * FDA&#39;s advisory committees are established to provide functions which support the agency&#39;s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void fdaCommitteeMeetingCalendarTest(TestContext testContext) {
        Async async = testContext.async();
        api.fdaCommitteeMeetingCalendar(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * SEC Filings
     * List company&#39;s filing. Limit to 250 documents at a time. This data is available for bulk download on &lt;a href&#x3D;\&quot;https://www.kaggle.com/finnhub/sec-filings\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Kaggle SEC Filings database&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void filingsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String cik = null;
        String accessNumber = null;
        String form = null;
        LocalDate from = null;
        LocalDate to = null;
        api.filings(symbol, cik, accessNumber, form, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * SEC Sentiment Analysis
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company&#39;s stock price in the upcoming 4 quarters. We make use of &lt;a href&#x3D; \&quot;https://sraf.nd.edu/textual-analysis/resources/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Loughran and McDonald Sentiment Word Lists&lt;/a&gt; to calculate the sentiment for each filing.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void filingsSentimentTest(TestContext testContext) {
        Async async = testContext.async();
        String accessNumber = null;
        api.filingsSentiment(accessNumber, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Financial Statements
     * &lt;p&gt;Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through &lt;a href&#x3D;\&quot;#filings\&quot;&gt;SEC Filings&lt;/a&gt; and &lt;a href&#x3D;\&quot;#international-filings\&quot;&gt;International Filings&lt;/a&gt; endpoints.&lt;/p&gt;&lt;p&gt;&lt;i&gt;Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&amp;P or Yahoo Finance ? Check out our &lt;a href&#x3D;\&quot;/faq\&quot;&gt;FAQ page&lt;/a&gt; to learn more&lt;/i&gt;&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void financialsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String statement = null;
        String freq = null;
        api.financials(symbol, statement, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Financials As Reported
     * Get financials as reported. This data is available for bulk download on &lt;a href&#x3D;\&quot;https://www.kaggle.com/finnhub/reported-financials\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Kaggle SEC Financials database&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void financialsReportedTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String cik = null;
        String accessNumber = null;
        String freq = null;
        LocalDate from = null;
        LocalDate to = null;
        api.financialsReported(symbol, cik, accessNumber, freq, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Forex Candles
     * Get candlestick data for forex symbols.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void forexCandlesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        Long from = null;
        Long to = null;
        api.forexCandles(symbol, resolution, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Forex Exchanges
     * List supported forex exchanges
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void forexExchangesTest(TestContext testContext) {
        Async async = testContext.async();
        api.forexExchanges(result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Forex rates
     * Get rates for all forex pairs. Ideal for currency conversion
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void forexRatesTest(TestContext testContext) {
        Async async = testContext.async();
        String base = null;
        String date = null;
        api.forexRates(base, date, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Forex Symbol
     * List supported forex symbols.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void forexSymbolsTest(TestContext testContext) {
        Async async = testContext.async();
        String exchange = null;
        api.forexSymbols(exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Fund Ownership
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void fundOwnershipTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        Long limit = null;
        api.fundOwnership(symbol, limit, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Download Filings
     * &lt;p&gt;Download filings using document ids.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void globalFilingsDownloadTest(TestContext testContext) {
        Async async = testContext.async();
        String documentId = null;
        api.globalFilingsDownload(documentId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Global Filings Search
     * &lt;p&gt;Search for best-matched filings across global companies&#39; filings, transcripts and press releases. You can filter by anything from symbol, ISIN to form type, and document sources.&lt;/p&gt;&lt;p&gt;This endpoint will return a list of documents that match your search criteria. If you would like to get the excerpts as well, please set &lt;code&gt;highlighted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Once you have the list of documents, you can get a list of excerpts and positions to highlight the document using the &lt;code&gt;/search-in-filing&lt;/code&gt; endpoint&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void globalFilingsSearchTest(TestContext testContext) {
        Async async = testContext.async();
        SearchBody search = null;
        api.globalFilingsSearch(search, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Search Filter
     * &lt;p&gt;Get available values for each filter in search body.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void globalFilingsSearchFilterTest(TestContext testContext) {
        Async async = testContext.async();
        String field = null;
        String source = null;
        api.globalFilingsSearchFilter(field, source, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Historical Employee Count
     * Get historical employee count for global companies.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void historicalEmployeeCountTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.historicalEmployeeCount(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Historical Market Cap
     * Get historical market cap data for global companies.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void historicalMarketCapTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.historicalMarketCap(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Indices Constituents
     * Get a list of index&#39;s constituents. A list of supported indices for this endpoint can be found &lt;a href&#x3D;\&quot;/api/v1/index/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void indicesConstituentsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.indicesConstituents(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Indices Historical Constituents
     * Get full history of index&#39;s constituents including symbols and dates of joining and leaving the Index. Currently support &lt;code&gt;^GSPC&lt;/code&gt;, &lt;code&gt;^NDX&lt;/code&gt;, &lt;code&gt;^DJI&lt;/code&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void indicesHistoricalConstituentsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.indicesHistoricalConstituents(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Insider Sentiment
     * Get insider sentiment data for US companies calculated using method discussed &lt;a href&#x3D;\&quot;https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void insiderSentimentTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.insiderSentiment(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Insider Transactions
     * Company insider transactions data sourced from &lt;code&gt;Form 3,4,5&lt;/code&gt;, SEDI and relevant companies&#39; filings. This endpoint covers US, UK, Canada, Australia, India, and all major EU markets. Limit to 100 transactions per API call.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void insiderTransactionsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.insiderTransactions(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Institutional Ownership
     * Get a list institutional investors&#39; positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void institutionalOwnershipTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String cusip = null;
        String from = null;
        String to = null;
        api.institutionalOwnership(symbol, cusip, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Institutional Portfolio
     * Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK &lt;a href&#x3D;\&quot;/api/v1/institutional/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void institutionalPortfolioTest(TestContext testContext) {
        Async async = testContext.async();
        String cik = null;
        String from = null;
        String to = null;
        api.institutionalPortfolio(cik, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Institutional Profile
     * Get a list of well-known institutional investors. Currently support 60+ profiles.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void institutionalProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String cik = null;
        api.institutionalProfile(cik, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * International Filings
     * List filings for international companies. Limit to 500 documents at a time. These are the documents we use to source our fundamental data. Enterprise clients who need access to the full filings for global markets should contact us for the access.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void internationalFilingsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String country = null;
        LocalDate from = null;
        LocalDate to = null;
        api.internationalFilings(symbol, country, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Investment Themes (Thematic Investing)
     * &lt;p&gt;Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.&lt;/p&gt;&lt;p&gt;This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.&lt;/p&gt;&lt;p&gt;A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void investmentThemesTest(TestContext testContext) {
        Async async = testContext.async();
        String theme = null;
        api.investmentThemes(theme, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * IPO Calendar
     * Get recent and upcoming IPO.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void ipoCalendarTest(TestContext testContext) {
        Async async = testContext.async();
        LocalDate from = null;
        LocalDate to = null;
        api.ipoCalendar(from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * ISIN Change
     * Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void isinChangeTest(TestContext testContext) {
        Async async = testContext.async();
        String from = null;
        String to = null;
        api.isinChange(from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Market Holiday
     * Get a list of holidays for global exchanges.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void marketHolidayTest(TestContext testContext) {
        Async async = testContext.async();
        String exchange = null;
        api.marketHoliday(exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Market News
     * Get latest market news.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void marketNewsTest(TestContext testContext) {
        Async async = testContext.async();
        String category = null;
        Long minId = null;
        api.marketNews(category, minId, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Market Status
     * Get current market status for global exchanges (whether exchanges are open or close).
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void marketStatusTest(TestContext testContext) {
        Async async = testContext.async();
        String exchange = null;
        api.marketStatus(exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds Country Exposure
     * Get Mutual Funds country exposure data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundCountryExposureTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.mutualFundCountryExposure(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds EET
     * Get EET data for EU funds. For PAIs data, please see the EET PAI endpoint.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundEetTest(TestContext testContext) {
        Async async = testContext.async();
        String isin = null;
        api.mutualFundEet(isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds EET PAI
     * Get EET PAI data for EU funds.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundEetPaiTest(TestContext testContext) {
        Async async = testContext.async();
        String isin = null;
        api.mutualFundEetPai(isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds Holdings
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href&#x3D;\&quot;/api/v1/mutual-fund/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundHoldingsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        Long skip = null;
        api.mutualFundHoldings(symbol, isin, skip, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds Profile
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN. A list of supported funds can be found &lt;a href&#x3D;\&quot;/api/v1/mutual-fund/list?token&#x3D;\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundProfileTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.mutualFundProfile(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Mutual Funds Sector Exposure
     * Get Mutual Funds sector exposure data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void mutualFundSectorExposureTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String isin = null;
        api.mutualFundSectorExposure(symbol, isin, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * News Sentiment
     * Get company&#39;s news sentiment and statistics. This endpoint is only available for US companies.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void newsSentimentTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.newsSentiment(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Ownership
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from &lt;code&gt;13F form&lt;/code&gt;, &lt;code&gt;Schedule 13D&lt;/code&gt; and &lt;code&gt;13G&lt;/code&gt; for US market, &lt;code&gt;UK Share Register&lt;/code&gt; for UK market, &lt;code&gt;SEDI&lt;/code&gt; for Canadian market and equivalent filings for other international markets.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void ownershipTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        Long limit = null;
        api.ownership(symbol, limit, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Pattern Recognition
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void patternRecognitionTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        api.patternRecognition(symbol, resolution, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Major Press Releases
     * &lt;p&gt;Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.&lt;/p&gt;&lt;p&gt;Full-text press releases data is available for Enterprise clients. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void pressReleasesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.pressReleases(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Price Metrics
     * Get company price performance statistics such as 52-week high/low, YTD return and much more.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void priceMetricsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String date = null;
        api.priceMetrics(symbol, date, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Price Target
     * Get latest price target consensus.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void priceTargetTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.priceTarget(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Quote
     * &lt;p&gt;Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.&lt;/p&gt;&lt;p&gt;Real-time stock prices for international markets are supported for Enterprise clients via our partner&#39;s feed. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact Us&lt;/a&gt; to learn more.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void quoteTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.quote(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Recommendation Trends
     * Get latest analyst recommendation trends for a company.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void recommendationTrendsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.recommendationTrends(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Revenue Breakdown
     * &lt;p&gt;Get revenue breakdown as-reporetd by product and geography. Users on personal plans can access data for US companies which disclose their revenue breakdown in the annual or quarterly reports.&lt;/p&gt;&lt;p&gt;Global standardized revenue breakdown/segments data is available for Enterprise users. &lt;a href&#x3D;\&quot;mailto:support@finnhub.io\&quot;&gt;Contact us&lt;/a&gt; to inquire about the access for Global standardized data.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void revenueBreakdownTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String cik = null;
        api.revenueBreakdown(symbol, cik, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Revenue Breakdown &amp; KPI
     * &lt;p&gt;Get standardized revenue breakdown and KPIs data for 30,000+ global companies.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void revenueBreakdown2Test(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.revenueBreakdown2(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Search In Filing
     * &lt;p&gt;Get a list of excerpts and highlight positions within a document using your query.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void searchInFilingTest(TestContext testContext) {
        Async async = testContext.async();
        InFilingSearchBody search = null;
        api.searchInFiling(search, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Sector Metrics
     * Get ratios for different sectors and regions/indices.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void sectorMetricTest(TestContext testContext) {
        Async async = testContext.async();
        String region = null;
        api.sectorMetric(region, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Similarity Index
     * &lt;p&gt;Calculate the textual difference between a company&#39;s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019&#39;s 10-K with 2018&#39;s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company&#39;s stock price in the upcoming 4 quarters.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void similarityIndexTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String cik = null;
        String freq = null;
        api.similarityIndex(symbol, cik, freq, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Social Sentiment
     * &lt;p&gt;Get social sentiment for stocks on Reddit and Twitter.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void socialSentimentTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.socialSentiment(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Dividends 2 (Basic)
     * Get global dividends data.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockBasicDividendsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.stockBasicDividends(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Last Bid-Ask
     * Get last bid/ask data for US stocks.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockBidaskTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.stockBidask(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Stock Candles
     * &lt;p&gt;Get candlestick data (OHLCV) for stocks.&lt;/p&gt;&lt;p&gt;Daily data will be adjusted for Splits. Intraday data will remain unadjusted. Only 1 month of intraday will be returned at a time. If you need more historical intraday data, please use the from and to params iteratively to request more data.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockCandlesTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        Long from = null;
        Long to = null;
        api.stockCandles(symbol, resolution, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Dividends
     * Get dividends data for common stocks going back 30 years.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockDividendsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockDividends(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Senate Lobbying
     * Get a list of reported lobbying activities in the Senate and the House.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockLobbyingTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockLobbying(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Historical NBBO
     * &lt;p&gt;Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.&lt;/p&gt;&lt;p&gt;For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;/dashboard/download\&quot;,&gt;here&lt;/a&gt;.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockNbboTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate date = null;
        Long limit = null;
        Long skip = null;
        api.stockNbbo(symbol, date, limit, skip, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Company Presentation
     * &lt;p&gt;Get presentations/slides data in PDF format that are usually used during earnings calls.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockPresentationTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.stockPresentation(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Splits
     * Get splits data for stocks.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockSplitsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockSplits(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Stock Symbol
     * List supported stocks. We use the following symbology to identify stocks on Finnhub &lt;code&gt;Exchange_Ticker.Exchange_Code&lt;/code&gt;. A list of supported exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockSymbolsTest(TestContext testContext) {
        Async async = testContext.async();
        String exchange = null;
        String mic = null;
        String securityType = null;
        String currency = null;
        api.stockSymbols(exchange, mic, securityType, currency, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Tick Data
     * &lt;p&gt;Get historical tick data for global exchanges.&lt;/p&gt;&lt;p&gt;For more historical tick data, you can visit our bulk download page in the Dashboard &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;/dashboard/download\&quot;,&gt;here&lt;/a&gt; to speed up the download process.&lt;/p&gt;&lt;table class&#x3D;\&quot;table table-hover\&quot;&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Exchange&lt;/th&gt;       &lt;th&gt;Segment&lt;/th&gt;       &lt;th&gt;Delay&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;US CTA/UTP&lt;/th&gt;       &lt;td&gt;Full SIP&lt;/td&gt;       &lt;td&gt;End-of-day&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;TSX&lt;/th&gt;       &lt;td&gt;&lt;ul&gt;&lt;li&gt;TSX&lt;/li&gt;&lt;li&gt;TSX Venture&lt;/li&gt;&lt;li&gt;Index&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;       &lt;td&gt;End-of-day&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;LSE&lt;/th&gt;       &lt;td&gt;&lt;ul&gt;&lt;li&gt;London Stock Exchange (L)&lt;/li&gt;&lt;li&gt;LSE International (L)&lt;/li&gt;&lt;li&gt;LSE European (L)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;       &lt;td&gt;15 minute&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;Euronext&lt;/th&gt;       &lt;td&gt;&lt;ul&gt; &lt;li&gt;Euronext Paris (PA)&lt;/li&gt; &lt;li&gt;Euronext Amsterdam (AS)&lt;/li&gt; &lt;li&gt;Euronext Lisbon (LS)&lt;/li&gt; &lt;li&gt;Euronext Brussels (BR)&lt;/li&gt; &lt;li&gt;Euronext Oslo (OL)&lt;/li&gt; &lt;li&gt;Euronext London (LN)&lt;/li&gt; &lt;li&gt;Euronext Dublin (IR)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;       &lt;td&gt;End-of-day&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class&#x3D;\&quot;text-blue\&quot;&gt;Deutsche Börse&lt;/th&gt;       &lt;td&gt;&lt;ul&gt; &lt;li&gt;Frankfurt (F)&lt;/li&gt; &lt;li&gt;Xetra (DE)&lt;/li&gt; &lt;li&gt;Duesseldorf (DU)&lt;/li&gt; &lt;li&gt;Hamburg (HM)&lt;/li&gt; &lt;li&gt;Berlin (BE)&lt;/li&gt; &lt;li&gt;Hanover (HA)&lt;/li&gt; &lt;li&gt;Stoxx (SX)&lt;/li&gt; &lt;li&gt;TradeGate (TG)&lt;/li&gt; &lt;li&gt;Zertifikate (SC)&lt;/li&gt; &lt;li&gt;Index&lt;/li&gt; &lt;li&gt;Warrant&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;       &lt;td&gt;End-of-day&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockTickTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate date = null;
        Long limit = null;
        Long skip = null;
        api.stockTick(symbol, date, limit, skip, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * USA Spending
     * Get a list of government&#39;s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockUsaSpendingTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockUsaSpending(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * USPTO Patents
     * List USPTO patents for companies. Limit to 250 records per API call.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockUsptoPatentTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockUsptoPatent(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * H1-B Visa Application
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void stockVisaApplicationTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.stockVisaApplication(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Supply Chain Relationships
     * &lt;p&gt;This endpoint provides an overall map of public companies&#39; key customers and suppliers. The data offers a deeper look into a company&#39;s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void supplyChainRelationshipsTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.supplyChainRelationships(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Support/Resistance
     * Get support and resistance levels for a symbol.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void supportResistanceTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        api.supportResistance(symbol, resolution, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Symbol Change
     * Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void symbolChangeTest(TestContext testContext) {
        Async async = testContext.async();
        String from = null;
        String to = null;
        api.symbolChange(from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Symbol Lookup
     * Search for best-matching symbols based on your query. You can input anything from symbol, security&#39;s name to ISIN and Cusip.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void symbolSearchTest(TestContext testContext) {
        Async async = testContext.async();
        String q = null;
        String exchange = null;
        api.symbolSearch(q, exchange, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Technical Indicators
     * Return technical indicator with price data. List of supported indicators can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void technicalIndicatorTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        String resolution = null;
        Long from = null;
        Long to = null;
        String indicator = null;
        Object indicatorFields = null;
        api.technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Call Transcripts
     * &lt;p&gt;Get earnings call transcripts, audio and participants&#39; list. Data is available for US, UK, European, Australian and Canadian companies.&lt;p&gt;15+ years of data is available with 220,000+ audio which add up to 7TB in size.&lt;/p&gt;
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void transcriptsTest(TestContext testContext) {
        Async async = testContext.async();
        String id = null;
        api.transcripts(id, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Earnings Call Transcripts List
     * List earnings call transcripts&#39; metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void transcriptsListTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        api.transcriptsList(symbol, result -> {
            // TODO: test validations
            async.complete();
        });
    }
    /**
     * Stock Upgrade/Downgrade
     * Get latest stock upgrade and downgrade.
     *
     * @param context Vertx test context for doing assertions
     */
    @Test
    public void upgradeDowngradeTest(TestContext testContext) {
        Async async = testContext.async();
        String symbol = null;
        LocalDate from = null;
        LocalDate to = null;
        api.upgradeDowngrade(symbol, from, to, result -> {
            // TODO: test validations
            async.complete();
        });
    }
}
