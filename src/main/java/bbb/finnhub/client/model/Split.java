/*
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package bbb.finnhub.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Split
 */
@JsonPropertyOrder({
  Split.JSON_PROPERTY_SYMBOL,
  Split.JSON_PROPERTY_DATE,
  Split.JSON_PROPERTY_FROM_FACTOR,
  Split.JSON_PROPERTY_TO_FACTOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class Split {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  @javax.annotation.Nullable
  private String symbol;

  public static final String JSON_PROPERTY_DATE = "date";
  @javax.annotation.Nullable
  private LocalDate date;

  public static final String JSON_PROPERTY_FROM_FACTOR = "fromFactor";
  @javax.annotation.Nullable
  private Float fromFactor;

  public static final String JSON_PROPERTY_TO_FACTOR = "toFactor";
  @javax.annotation.Nullable
  private Float toFactor;

  public Split() {
  }

  public Split symbol(@javax.annotation.Nullable String symbol) {
    
    this.symbol = symbol;
    return this;
  }

  /**
   * Symbol.
   * @return symbol
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }

  public Split date(@javax.annotation.Nullable LocalDate date) {
    
    this.date = date;
    return this;
  }

  /**
   * Split date.
   * @return date
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(@javax.annotation.Nullable LocalDate date) {
    this.date = date;
  }

  public Split fromFactor(@javax.annotation.Nullable Float fromFactor) {
    
    this.fromFactor = fromFactor;
    return this;
  }

  /**
   * From factor.
   * @return fromFactor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getFromFactor() {
    return fromFactor;
  }


  @JsonProperty(JSON_PROPERTY_FROM_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromFactor(@javax.annotation.Nullable Float fromFactor) {
    this.fromFactor = fromFactor;
  }

  public Split toFactor(@javax.annotation.Nullable Float toFactor) {
    
    this.toFactor = toFactor;
    return this;
  }

  /**
   * To factor.
   * @return toFactor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getToFactor() {
    return toFactor;
  }


  @JsonProperty(JSON_PROPERTY_TO_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToFactor(@javax.annotation.Nullable Float toFactor) {
    this.toFactor = toFactor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Split split = (Split) o;
    return Objects.equals(this.symbol, split.symbol) &&
        Objects.equals(this.date, split.date) &&
        Objects.equals(this.fromFactor, split.fromFactor) &&
        Objects.equals(this.toFactor, split.toFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, date, fromFactor, toFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Split {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    fromFactor: ").append(toIndentedString(fromFactor)).append("\n");
    sb.append("    toFactor: ").append(toIndentedString(toFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

